import os
import json
import requests
import telebot
from telebot import types
from src.config import API_TOKEN, CRYPTO_PAY_TOKEN
import traceback

bot = telebot.TeleBot(API_TOKEN)
user_lang = {}

texts = {
    'ru': {
        'welcome': "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        'shop': "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN –º–∞–≥–∞–∑–∏–Ω! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥.",
        'pay': "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ {plan} (${price}).\n–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:"
    },
    'en': {
        'welcome': "Welcome! Please select your language:",
        'shop': "Welcome to the VPN Shop! Click the button below to open the catalog.",
        'pay': "You selected the {plan} plan (${price}).\nPay using the link below:"
    }
}

def get_lang(message):
    return user_lang.get(message.from_user.id, 'en')

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("English"), types.KeyboardButton("–†—É—Å—Å–∫–∏–π"))
    bot.send_message(message.chat.id, texts['en']['welcome'], reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ["English", "–†—É—Å—Å–∫–∏–π"])
def set_language(message):
    lang = 'en' if message.text == "English" else 'ru'
    user_lang[message.from_user.id] = lang
    bot.send_message(message.chat.id, "‚úÖ", reply_markup=types.ReplyKeyboardRemove())
    webapp_markup = types.InlineKeyboardMarkup()
    webapp_markup.add(
        types.InlineKeyboardButton(
            "üåê Open VPN Shop" if lang == 'en' else "üåê –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω",
            web_app=types.WebAppInfo(url="https://bot-tg-aai9.onrender.com/")
        )
    )
    bot.send_message(message.chat.id, texts[lang]['shop'], reply_markup=webapp_markup)

def create_crypto_pay_invoice(plan: str, price, user_id):
    try:
        payload = {
            "asset": "USDT",
            "amount": price,
            "description": f"VPN —Ç–∞—Ä–∏—Ñ: {plan}",
            "hidden_message": f"User ID: {user_id}"
        }
        print("–°–æ–∑–¥–∞—ë–º –∏–Ω–≤–æ–π—Å CryptoPay, payload:", payload)
        resp = requests.post(
            "https://pay.crypt.bot/api/createInvoice",
            json=payload,
            headers={"Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN},
            timeout=15
        )
        print("CryptoPay HTTP status:", resp.status_code)
        print("CryptoPay response text:", resp.text)
        try:
            j = resp.json()
        except Exception as e:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç CryptoPay:", e)
            return None
        pay_url = j.get('result', {}).get('pay_url')
        return pay_url
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ create_crypto_pay_invoice:", e)
        print(traceback.format_exc())
        return None

@bot.message_handler(content_types=['web_app_data'])
def handle_web_app_data(message):
    try:
        raw = getattr(message, 'web_app_data', None)
        print("RAW web_app_data object:", raw)
        if not raw or not getattr(raw, 'data', None):
            print("–ù–µ—Ç web_app_data.data –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
            bot.send_message(message.chat.id, "–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Mini App. –û—Ç–∫—Ä–æ–π—Ç–µ Mini App —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ Telegram.")
            return

        print("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Mini App:", message.web_app_data.data)
        lang = get_lang(message)
        data = json.loads(message.web_app_data.data)
        plan = data.get('plan')
        price = data.get('price')
        if not plan or price is None:
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Mini App:", data)
            bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        pay_url = create_crypto_pay_invoice(plan, price, message.from_user.id)
        if pay_url:
            bot.send_message(message.chat.id, texts[lang]['pay'].format(plan=plan, price=price) + f"\n{pay_url}")
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ web_app_data:", e)
        print(traceback.format_exc())
        try:
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass

if __name__ == "__main__":
    import time
    print("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É polling...")
    try:
        # —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ webhook —Å–Ω—è—Ç
        try:
            bot.remove_webhook()
            print("Webhook removed (if existed).")
        except Exception as e:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —è–≤–Ω–æ —É–¥–∞–ª–∏—Ç—å webhook:", e)

        # –∑–∞–ø—É—Å–∫ polling –≤ —Ü–∏–∫–ª–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 409)
        while True:
            try:
                print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è...")
                bot.polling(none_stop=True)
            except Exception as e:
                print("Polling —É–ø–∞–ª —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º:", repr(e))
                # –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç 409 ‚Äî –∑–Ω–∞—á–∏—Ç –≥–¥–µ-—Ç–æ –µ—â—ë –∑–∞–ø—É—â–µ–Ω polling/webhook
                # –ø–æ–¥–æ–∂–¥—ë–º –∏ –ø–æ–ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞ (–Ω–µ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞—Ç—å)
                time.sleep(5)
    except KeyboardInterrupt:
        print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
